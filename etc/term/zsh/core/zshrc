# shellcheck shell=/usr/bin/zsh
# =============================================================================
# Yvan Vivid - dotfiles - Zsh RC
# =============================================================================
emulate zsh
print "Loading zshrc."

# =============================================================================
# Foundation -- utility functions
# =============================================================================

function tryrun {
  if [[ -s "$1" ]]
  then source "$1"
  else print "$1 not found."
  fi
}

# =============================================================================
# Compiler setup from github://romkatv/dotfiles-public
# =============================================================================

# Compile or update given file to $1.zwc if need be
function jit() {
  emulate -L zsh

  # if compiled is newer or can't write it
  [[ $1.zwc -nt $1 || ! -w ${1:h} ]] && return

  zmodload -F zsh/files b:zf_mv b:zf_rm
  local tmp=$1.tmp.$$.zwc
  { 
    # Compile to a temp file and only replace if successful
    zcompile -R -- $tmp $1 && zf_mv -f -- $tmp $1.zwc || return
  } always { 
    # Clean up temp
    (( $? )) && zf_rm -f -- $tmp
  }
}

# Compile/update and source
function jit-source() {
  emulate -L zsh
  [[ -e $1 ]] && jit $1 && source -- $1
}

# Worth it?
# jit ~/.zshrc
# jit ~/.zshenv

# =============================================================================
# Locations -- Globals
# =============================================================================

typeset -gx ZSH_STATE ZSH_CACHE
ZSH_STATE="$DOT_STATE/zsh"
ZSH_CACHE="$DOT_CACHE/zsh"
mkdir -p "$ZSH_STATE" "$ZSH_CACHE"

typeset -g zsh_tools \
  zsh_tools_p10k zsh_tools_autosg zsh_tools_comps zsh_tools_syntax
zsh_tools="$DOT_TOOLS"
if [[ ! -d "$zsh_tools" ]]; then
  echo "Could not find zsh_tools = [$zsh_tools]"
else
  zsh_tools_p10k="$zsh_tools/powerlevel10k"
  zsh_tools_autosg="$zsh_tools/zsh-autosuggestions"
  zsh_tools_autocmp="$zsh_tools/zsh-completions"
  zsh_tools_syntax="$zsh_tools/zsh-syntax-highlighting"
fi

typeset -g zsh_etc
zsh_etc="$DOT_ETC/term/zsh"

# All the various paths
typeset -gaU cdpath fpath mailpath path

fpath=("$zsh_tools_comps/src" $fpath)

typeset -g local_cache="${XDG_CACHE_HOME:-$HOME/.cache}"
typeset -g p10k_inst_prompt="$local_cache/p10k-instant-prompt-${(%):-%n}.zsh"
[[ -r "$p10k_inst_prompt" ]] && source "$p10k_inst_prompt"

# =============================================================================
# zle settings
# =============================================================================

ZSH_HIGHLIGHT_MAXLENGTH=1024
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)
ZSH_AUTOSUGGEST_MANUAL_REBIND=1
PROMPT_EOL_MARK='%K{red} %k'   # mark the missing \n at the end of a comand output with a red block
READNULLCMD=$PAGER             # use the default pager instead of `more`
WORDCHARS=''                   # only alphanums make up words in word-based zle widgets
ZLE_REMOVE_SUFFIX_CHARS=''     # don't eat space when typing '|' after a tab completion

autoload -Uz is-at-least
if is-at-least 5.7.2 \
  || [[ $ZSH_PATCHLEVEL =~ '^zsh-5\.7\.1-([0-9]+)-' && $match[1] -ge 50 ]]
then ZLE_RPROMPT_INDENT=0
fi

if (( $#commands[(i)lesspipe(|.sh)] )); then
  export LESSOPEN="| /usr/bin/env $commands[(i)lesspipe(|.sh)] %s 2>&-"
fi

if [[ -x /usr/lib/command-not-found ]]; then
  function command_not_found_handler() { /usr/lib/command-not-found -- "$@" }
fi

# =============================================================================
# completions
# =============================================================================

typeset zc_dump zc_cache
zc_dump="$ZSH_CACHE/zcompdump-$ZSH_VERSION"
zc_cache="$ZSH_CACHE/zcompcache-$ZSH_VERSION"

autoload -Uz compinit
compinit -d "$zc_dump"
jit "$zc_dump"

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'l:|=* r:|=*'

# Caching
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path $zc_cache

# Other settings
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*' completer _complete
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' single-ignored show
zstyle ':completion:*:(rm|kill|diff):*' ignore-line other
zstyle ':completion:*:rm:*' file-patterns '*:all-files'
zstyle ':completion:*:*:*:*:processes' command 'ps -A -o pid,user,command -w'

# Not sure how this works!
zstyle -e ':completion:*:hosts' hosts 'reply=(
  ${=${=${=${${(f)"$(cat {/etc/ssh/ssh_,~/.ssh/}known_hosts(|2)(N) 2> /dev/null)"}%%[#| ]*}//\]:[0-9]*/ }//,/ }//\[/ }
  ${=${(f)"$(cat /etc/hosts(|)(N) <<(${commands[ypcat]:-true} hosts 2> /dev/null))"}%%\#*}
  ${=${${${${(@M)${(f)"$(cat ~/.ssh/config 2> /dev/null)"}:#Host *}#Host }:#*\**}:#*\?*}}
)'

# =============================================================================
# bindings
# =============================================================================

# Should be redundant with VI option, but sets vi key bindings
bindkey -v

# =============================================================================
# loading
# =============================================================================

# Powerlevel10k prompt
jit-source "$zsh_tools_p10k/powerlevel10k.zsh-theme"
jit-source "$zsh_etc/settings/p10k.zsh"

# Autosuggestions
jit-source "$zsh_tools_autosg/zsh-autosuggestions.plugin.zsh"

# Cursor settings
jit-source "$zsh_etc/settings/cursor.zsh"

# Aliases
jit-source "$zsh_etc/settings/aliases.zsh"

# additions ...

# Syntax Highlighting - (last plugin)
jit-source "$zsh_tools_syntax/zsh-syntax-highlighting.plugin.zsh"

# Options
jit-source "$zsh_etc/settings/shopts.zsh"

# =============================================================================
# vim: et fenc=utf-8 ft=zsh sts=2 sw=2 ts=2 tw=80
