#!/usr/bin/env bash
################################################################################
# Yvan Vivid -- Wrapper for zathura
################################################################################
# This script uses zathura to do pdf sorting and renaming

################################################################################
# General constants
declare -r _tui=0

################################################################################
# Locations for pdfs
declare -A locations
locations["papers"]="/data/media/texts/papers"
locations["books"]="/data/media/texts/books"
locations["scores"]="/data/media/texts/scores"
locations["delete"]="$HOME/_/var/shunt"
################################################################################

################################################################################
# Check requirements and get zathura
declare zathura
zathura="$(command -v "zathura")"
if [[ -z "$zathura" ]]; then
  echo "Could not find 'zathura' command" >&2
  exit 1
fi
################################################################################

################################################################################
# General functions
msg() { echo "${1}" >&2; }
die() { msg "$1"; exit 1; }

save_term() {
  if (( _tui == 0 )); then
    tput smcup
  fi
}

restore_term() {
  if (( _tui == 0 )); then
    tput cnorm
    tput rmcup
  fi
}

reset_tui() {
  if (( _tui == 0 )); then
    tput clear
    tput civis
  fi
}

reset_tui_state() {
  if (( _tui == 0 )); then
    tput cnorm
  fi
}
################################################################################

################################################################################
# Viewer
declare viewer

zrunner() {
  "$zathura" "$@" >/dev/null &
  viewer="$!"
}

zclose() {
  local -i num_jobs=0
  if [[ -n "$viewer" ]]; then
    num_jobs=$(jobs -r | wc -l)
    (( num_jobs > 0 )) && kill "$viewer"
    viewer=""
  fi
}
################################################################################

################################################################################
# Chooser
menu() {
  echo "Action:"
  echo "(r) Rename"
  echo "(p) Move to <papers>"
  echo "(b) Move to <books>"
  echo "(d) Delete (to shunt)"
  echo "(c) Commit (a) Skip (q) Quit"
}

declare name dest
declare -i commit
choose() {
  local choice
  while true; do
    reset_tui
    if [[ -z "$dest" ]]; then
      echo "File = $name"
    else
      echo "File = $name -> <$dest>"
    fi
    menu
    read -rsn 1 choice
    reset_tui_state
    case "$choice" in
      r) read -rp "New name = " name;;
      p) dest="papers";;
      b) dest="books";;
      s) dest="scores";;
      d) dest="delete";;
      c) commit=0; break;;
      a) commit=1; break;;
      q) exit 0;
    esac
  done
}
################################################################################

################################################################################
# Driver
declare -a summary
declare -i dry_run
summary=()
dry_run=1
view() {
  declare path oname
  path="$1"
  oname="$(basename "$path")"
  name="$oname"
  dest="_"

  zrunner "$path"
  choose
  zclose

  declare new_path
  if (( commit == 0 )); then
    new_path="${locations["$dest"]:-"$(dirname "$path")"}/$name"
    [[ "$path" == "$new_path" ]] && return

    summary+=("mv '$path' '$new_path'")
    (( dry_run == 0 )) || mv "$path" "$new_path"
  fi
}

leave() {
  zclose
  restore_term
  if (( ${#summary[@]} > 0 )); then
    echo
    echo "Summary:"
    for s in "${summary[@]}"; do echo "$s"; done
    echo ""
  fi
  exit 0
}
################################################################################

################################################################################
# CLI
declare -a args
args=()
parse_params() {
  while (( $# > 0 )); do
    case "$1" in
    -h | --help) usage ;;
    --dry-run) dry_run=0 ;;
    -?*) die "Unknown option: $1" ;;
    *) args+=("$1");;
    esac
    shift
  done

  [[ ${#args[@]} -eq 0 ]] && die "Missing pdf files to run."
  return 0
}
################################################################################

################################################################################
# Main

parse_params "$@"

save_term
trap "leave" EXIT

for path in "${args[@]}"; do view "$path"; done
